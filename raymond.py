# -*- coding: utf-8 -*-
"""Raymond.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEIrgaDPv7r0rQx8ApmsMSdxuh3aU5_6
"""

import pandas as pd
import numpy as np
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

#Load the data in csv format
from google.colab import files
uploaded = files.upload()

df = pd.read_csv("11-10-2019-TO-09-10-2020RAYMONDALLN.csv")
df.head()

# Get the number of trading days
df.shape

# Visualize the close price data
plt.figure(figsize=(16,8))
plt.title('Raymond')
plt.xlabel('Days')
plt.ylabel('Close Price INR')
plt.plot(df['Close Price'])
plt.show()

#get the close price
df = df[['Close Price']]
df.head()

# Create a variable to predict 'x' days out into the future
future_days = 25
# Create a new column (target variable) shifted 'x' days up
df['Prediction'] = df[['Close Price']].shift(-future_days)
df.head()

df.tail()

# Create a feature data set (X) and convert it into numpy array
X = np.array(df.drop(['Prediction'], 1))
print(X)

# lets drop the last 'x' rows/days
X = np.array(df.drop(['Prediction'], 1)) [:-future_days]
print(X)

# Create the target data set (Y) and convert it into numpy array and get all the target value except the last 'x' days
Y = np.array(df['Prediction'])[:-future_days]
print(Y)

# Split the data in 75% training and 25% testing
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.25)

#Decision Tree Regressor Model
tree = DecisionTreeRegressor().fit(x_train, y_train)
# Linear Regression Model
lr = LinearRegression().fit(x_train, y_train)

#get the last 'x' rows of the dataset
x_future = df.drop(['Prediction'], 1)[-future_days:]
x_future = x_future.tail(future_days)
#converting the dataset to numpy array
x_future = np.array(x_future)
x_future

#Show the model tree prediction
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
#Show the Linear Regression Model prediction
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#Visualize the data Decision Tree
predictions = tree_prediction

valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price INR')
plt.plot(df['Close Price'])
plt.plot(valid[['Close Price', 'Predictions']])
plt.legend(['Original', 'Valid', 'Predictions'])
plt.show()

#Visualize the data Linear Regression
predictions = lr_prediction

valid = df[X.shape[0]:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Days')
plt.ylabel('Close Price INR')
plt.plot(df['Close Price'])
plt.plot(valid[['Close Price', 'Predictions']])
plt.legend(['Original', 'Valid', 'Predictions'])
plt.show()

